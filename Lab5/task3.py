# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xMkANoZxgOFN3mB6DHguDImgz9izEh-B
"""

# Task-03(DFS_SCC)
input = open('/content/input3.txt', 'r')
output = open('/content/output3.txt', 'w')
vertex, edge = map(int, input.readline().rstrip().split())
G = {}
Gt = {}
for i in range(1, vertex + 1):
    G[i] = []
    Gt[i] = []
for x in range(edge):
    v,e = map(int, input.readline().rstrip().split())
    G[v].append(e)
    Gt[e].append(v)

# Topological sort for the original graph
color = ["White"] * (vertex + 1)
start_time = [0] * (vertex + 1)
end_time = [0] * (vertex + 1)
time = 0

for key in G.keys():
    if color[key] == "White":
        DFS_visit(G, key)


def DFS_visit(G, u):
    global time
    time = time + 1
    start_time[u] = time
    color[u] = "Grey"
    for v in G[u]:
        if color[v] == "White":
            DFS_visit(G, v)
    color[u] = "Black"
    time = time + 1
    end_time[u] = time


topological_order = []
for i in range(1, len(end_time)):
    m = max(end_time)
    l = end_time.index(m)
    topological_order.append(l)
    end_time[l] = 0

# DFS on the transpose graph in topological order
def DFS_visit_GT(Gt, u):
    color_Gt[u] = "Grey"
    print(u, end=" ", file = output)
    for v in Gt[u]:
        if color_Gt[v] == "White":
            DFS_visit_GT(Gt, v)
        color_Gt[u] = "Black"

color_Gt = ["White"] * (vertex + 1)
for ele in topological_order:
    if color_Gt[ele] == "White":
        DFS_visit_GT(Gt, ele)
        print(file = output)

output.close()