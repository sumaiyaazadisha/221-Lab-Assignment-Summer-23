# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnh2zV2fPdGBoV14rRLSboS8Z35HrSLp
"""

# Task-01(Dijkstra)
import heapq
input = open('/content/input1.txt', 'r')
output= open('/content/output1.txt','w')
vertex, edge = map(int, input.readline().rstrip().split())
G = {}
for i in range(1, vertex + 1):
    G[i] = []
for x in range(edge):
    v, e, w = map(int, input.readline().rstrip().split())
    G[v].append((e, w))

source = int(input.readline().rstrip())


def shortest_path(G, s):
    priority_queue = []
    heapq.heappush(priority_queue, (s, 0))

    distance = [float('inf')] * (vertex + 1)
    distance[s] = 0

    while priority_queue != []:
        ver, dis = heapq.heappop(priority_queue)
        for edge, weight in G[ver]:
            if distance[edge] > distance[ver] + weight:
                distance[edge] = distance[ver] + weight
                heapq.heappush(priority_queue, (edge, distance[edge]))

    for val in range(1, vertex + 1):
        if distance[val] != float('inf'):
            print(distance[val], end=" ", file = output)
        else:
            print(-1, end=" ", file = output)


shortest_path(G, source)
output.close()