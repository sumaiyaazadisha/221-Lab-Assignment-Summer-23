# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnh2zV2fPdGBoV14rRLSboS8Z35HrSLp
"""

# Task-03(Dijkstra)
import heapq
input = open('/content/input3.txt', 'r')
output= open('/content/output3.txt','w')
vertex, edge = map(int, input.readline().rstrip().split())
G = {}
for i in range(1, vertex + 1):
    G[i] = []
for x in range(edge):
    v, e, w = map(int, input.readline().rstrip().split())
    G[v].append((e, w))

source = 1

def minimum_danger(G, s):
    priority_queue = []
    danger = [float('inf')] * (vertex + 1)
    danger[s] = 0
    heapq.heappush(priority_queue, (s, 0))

    while priority_queue != []:
        ver, d = heapq.heappop(priority_queue)

        if ver == vertex:
            return danger[ver]
            break

        for edge, weight in G[ver]:
            new_d = max(danger[ver], weight)

            if new_d < danger[edge]:
                danger[edge] = new_d
                heapq.heappush(priority_queue, (edge, new_d))
    return "Impossible"


print(minimum_danger(G, source), file = output)
output.close()