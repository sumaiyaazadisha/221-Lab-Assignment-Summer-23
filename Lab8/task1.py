# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sV3XDb1CXZlt01JqKNmoBNCfCEXKDkuN
"""

#Task-01
input = open('/content/input1.txt', 'r')
output = open('/content/output1.txt', 'w')
N, M = map(int, input.readline().rstrip().split())
roads = []
for i in range(M):
    c1, c2, cost = map(int, input.readline().rstrip().split())
    roads.append((c1, c2, cost))


def find_parent(parents, city):
    if parents[city] == city:
        return city
    else:
      parents[city] = find_parent(parents, parents[city])
      return parents[city]

def union(parents, city1, city2):
    parent1 = find_parent(parents, city1)
    parent2 = find_parent(parents, city2)
    if parent1 != parent2:
        parents[parent1] = parent2

roads.sort(key=lambda x: x[2])
parents=[i for i in range(N+1)]
total_cost = 0

for road in roads:
    city1, city2, cost = road
    parent1 = find_parent(parents, city1)
    parent2 = find_parent(parents, city2)
    if parent1 != parent2:
        union(parents, parent1, parent2)
        total_cost+=cost

print(total_cost, file = output)
output.close()